---
- name: Create AWS instances using machine sets
  hosts: localhost
  connection: local

  vars:
    aws_region: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"
    cluster_id: "{{ lookup('env', 'OPT_CLUSTER_ID') }}"
    cluster_dir: "/oa-testing/cluster"
    platform_type: "{{ lookup('env', 'OPT_PLATFORM_TYPE') | default('rhel', true) }}"
    platform_version: "{{ lookup('env', 'OPT_PLATFORM_VERSION') | default('7.9', true) }}"
    platform_type_dict:
      centos:
        username: "centos"
        owners: "679593333241"
        filters:
          product-code: "aw0evgkw8e5c1q413zgy5pjce"  # CentOS-7 x86_64
      rhel:
        username: "ec2-user"
        owners: "309956199498"  # Red Hat, Inc.
        filters:
          name: "RHEL-{{ platform_version }}*Hourly*"
          architecture: "x86_64"
    kubeconfig_path: "/oa-testing/cluster/assets/auth/kubeconfig"
    pull_secret_path: "/oa-testing/pull-secret.txt"
    private_key_path: "{{ cluster_dir }}/assets/auth/id_ssh_rsa"

    new_workers_list: []

  tasks:
  - name: Retrieve platform AMI list
    ec2_ami_info:
      region: "{{ aws_region }}"
      owners: "{{ platform_type_dict[platform_type].owners }}"
      filters: "{{ platform_type_dict[platform_type].filters }}"
    register: ec2_ami_facts_results

  - name: Set aws_ami to most recent image
    set_fact:
      aws_ami: "{{ ec2_ami_facts_results.images[-1].image_id }}"

  - name: Get existing worker machinesets
    command: >
      oc get machinesets
      --kubeconfig={{ kubeconfig_path }}
      --namespace=openshift-machine-api
      --output=json
    register: machineset
    until:
    - machineset.stdout != ''
    changed_when: false

  - include_tasks: tasks/create_machineset.yml
    loop: "{{ (machineset.stdout | from_json)['items'] }}"
    loop_control:
      loop_var: machineset_obj
    when:
    - machineset_obj.status.replicas is defined
    - machineset_obj.status.replicas != 0

  - name: Get ssh bastion address
    command: >
      oc get service ssh-bastion
      --kubeconfig={{ kubeconfig_path }}
      --namespace=test-ssh-bastion
      --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}'
    register: oc_get
    until:
    - oc_get.stdout != ''
    changed_when: false

  - name: Set fact ssh_bastion
    set_fact:
      ssh_bastion: "{{ oc_get.stdout }}"

  - name: Create Inventory directory
    file:
      path: "{{ cluster_dir }}/inventory"
      state: directory

  - name: Create Ansible Inventory File
    template:
      src: hosts40.j2
      dest: "{{ cluster_dir }}/inventory/hosts"
