---

- name: Provision AWS instances
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    aws_region: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"
    aws_zone: "{{ aws_region }}a"
    cluster_id: "{{ lookup('env', 'OPT_CLUSTER_ID') }}"
    cluster_metadata: "{{ lookup('file', cluster_dir ~ '/assets/metadata.json') | from_json }}"
    cluster_dir: "/oa-testing/cluster"
    aws_instance_file: "{{ cluster_dir }}/inventory/aws.json"
    aws_instance_type: "{{ lookup('env', 'OPT_INSTANCE_TYPE') | default('m4.large', true) }}"
    compute_count: "{{ lookup('env', 'OPT_COMPUTE_COUNT') | default(3, true)}}"
    kubeconfig_path: "/oa-testing/cluster/assets/auth/kubeconfig"
    pull_secret_path: "/oa-testing/pull-secret.txt"
    private_key_path: "{{ cluster_dir }}/assets/auth/id_ssh_rsa"

    new_workers_list: []
    aws_volumes:
      - device_name: /dev/sda1
        volume_size: 120
        volume_type: gp2
        delete_on_termination: true
    platform_type: "{{ lookup('env', 'OPT_PLATFORM_TYPE') | default('rhel', true) }}"
    platform_version: "{{ lookup('env', 'OPT_PLATFORM_VERSION') | default('7.9', true) }}"
    platform_type_dict:
      centos:
        username: "centos"
        owners: "679593333241"
        filters:
          product-code: "aw0evgkw8e5c1q413zgy5pjce"  # CentOS-7 x86_64
      rhel:
        username: "ec2-user"
        owners: "309956199498"  # Red Hat, Inc.
        filters:
          name: "RHEL-{{ platform_version }}*Hourly*"
          architecture: "x86_64"

  tasks:
  - name: Set fact cluster_infra_id
    set_fact:
      cluster_infra_id: "{{ cluster_metadata.infraID }}"

  - name: Check for AWS Instance File
    stat:
      path: "{{ aws_instance_file }}"
    register: aws_instance_file_result

  - when: aws_instance_file_result.stat.exists
    block:
    - name: Existing AWS Instance File
      debug:
        msg: "Skipping provision, existing AWS Instance file found."
    - meta: end_play

  - name: Find the most recently created AMI
    amazon.aws.ec2_ami_info:
      region: "{{ aws_region }}"
      owners: "{{ platform_type_dict[platform_type].owners }}"
      filters: "{{ platform_type_dict[platform_type].filters }}"
    register: ec2_ami_facts_results

  - name: Set aws_ami to most recent image
    set_fact:
      aws_ami: "{{ ec2_ami_facts_results.images[-1].image_id }}"

  - name: Find the ec2 security group
    ec2_group_info:
      region: "{{ aws_region }}"
      filters:
        "tag:Name": "{{ cluster_infra_id }}-worker-sg"
    register: ec2_group_info_results

  - name: Set fact aws_sg
    set_fact:
      aws_sg: "{{ ec2_group_info_results.security_groups[0].group_id }}"

  - name: Find the vpc subnet
    ec2_vpc_subnet_info:
      region: "{{ aws_region }}"
      filters:
        "tag:Name": "{{ cluster_infra_id }}-private-{{ aws_zone }}"
    register: ec2_vpc_subnet_info_results

  - name: Set fact aws_subnet
    set_fact:
      aws_subnet: "{{ ec2_vpc_subnet_info_results.subnets[0].id }}"

  - name: Create AWS Instances
    amazon.aws.ec2:
      region: "{{ aws_region }}"
      key_name: "{{ cluster_id }}"
      instance_type: "{{ aws_instance_type }}"
      instance_profile_name: "{{ cluster_infra_id }}-worker-profile"
      count: "{{ compute_count }}"
      zone: "{{ aws_zone }}"
      group_id:
        - "{{ aws_sg }}"
      vpc_subnet_id: "{{ aws_subnet }}"
      image: "{{ aws_ami }}"
      volumes: "{{ aws_volumes }}"
      wait: yes
      instance_tags: |
        {
          'kubernetes.io/cluster/{{ cluster_infra_id}}': 'owned',
          'Name': '{{ cluster_infra_id }}-worker-{{ aws_zone }}-rhel'
        }
    register: aws_instances

  - name: Create Inventory directory
    file:
      path: "{{ cluster_dir }}/inventory"
      state: directory

  - name: Save created AWS Instances
    copy:
      dest: "{{ aws_instance_file }}"
      content: "{{ aws_instances | to_nice_json }}"

  - name: Get ssh bastion address
    command: >
      oc get service ssh-bastion
      --kubeconfig={{ kubeconfig_path }}
      --namespace=test-ssh-bastion
      --output=jsonpath='{.status.loadBalancer.ingress[0].hostname}'
    register: oc_get
    until:
    - oc_get.stdout != ''
    changed_when: false

  - name: Set fact ssh_bastion
    set_fact:
      ssh_bastion: "{{ oc_get.stdout }}"

  - name: Create list of new workers
    set_fact:
      new_workers_list: "{{ new_workers_list + [ item.private_dns_name ] }}"
    with_items:
    - "{{ aws_instances.instances }}"

  - name: Create Ansible Inventory File
    template:
      src: hosts40.j2
      dest: "{{ cluster_dir }}/inventory/hosts"
