---
- import_playbook: lb-for-atomic.yml
  when: platform_type == 'atomic'

- name: Prep Playbook
  hosts: all
  any_errors_fatal: true
  gather_facts: false

  handlers:
  - import_tasks: handlers/main.yml
  vars:
    openshift_service_type_dict:
      origin: origin
      openshift-enterprise: atomic-openshift
    openshift_service_type: "{{ openshift_service_type_dict[openshift_deployment_type] }}"
    latest_version: '3.11'
    build_version: "{{ lookup('env', 'OPT_PREP_BUILD_VERSION') | default('latest', true) }}"
    use_rhn: "{{ lookup('env', 'OPT_PREP_USE_RHN') | default(false, true) | bool }}"
    mirror_username: "{{ lookup('ini', 'mirror_username section=default file=/oa-testing/openshift-creds.txt') | default('', true) }}"
    mirror_password: "{{ lookup('ini', 'mirror_password section=default file=/oa-testing/openshift-creds.txt') | default('', true) }}"
    private_key_path: "/oa-testing/openshift-dev.pem"
    platform_type: "{{ lookup('env', 'OPT_PLATFORM_TYPE') | default('rhel', true) }}"
    platform_version: "{{ lookup('env', 'OPT_PLATFORM_VERSION') | default('7.9', true) }}"
    major_platform_version: "{{ platform_version[:1] }}"

  tasks:
  # The token expires every 30 days so make sure it still works
  - name: Validate oreg_auth_password (~/openshift-creds.txt)
    command: oc login https://api.reg-aws.openshift.com --token={{ oreg_auth_password }}
    delegate_to: localhost
    run_once: true
    changed_when: false
    when:
    - oreg_auth_password is defined
    - ("reg-aws.openshift.com" in oreg_url)

  - name: Fail if mirror credentials are not defined in ~/openshift-creds.txt
    fail:
      msg: "mirror_username and mirror_password must be defined in ~/openshift-creds.txt"
    when:
    - mirror_username == '' or mirror_password == ''

  - name: Ensure proper permissions on private key file
    file:
      path: "{{ private_key_path }}"
      mode: 0600
    delegate_to: localhost
    run_once: true

  - name: Set release_version using openshift_release if defined
    set_fact:
      release_version: "{{ openshift_release | regex_replace('^.(\\d+\\.\\d+).*', '\\1') }}"
    when:
    - openshift_release is defined

  - name: Set release_version using openshift_pkg_version if defined
    set_fact:
      release_version: "{{ openshift_pkg_version | regex_replace('^.(\\d+\\.\\d+).*', '\\1') }}"
    when:
    - release_version is not defined
    - openshift_pkg_version is defined

  - name: Set release_version using openshift_image_tag if defined
    set_fact:
      release_version: "{{ (openshift_image_tag | regex_replace('^.(\\d+\\.\\d+).*', '\\1')) if openshift_image_tag != 'latest' else omit }}"
    when:
    - release_version is not defined
    - openshift_image_tag is defined

  - name: Set release_version to latest if no version provided
    set_fact:
      release_version: "{{ latest_version }}"
    when:
    - release_version is not defined

  - name: Set major_release_version
    set_fact:
      major_release_version: "{{ release_version[:1] }}"

  - name: Wait for host connection to ensure SSH has started
    wait_for_connection:
      timeout: 600

  - name: Detecting Operating System from ostree_booted
    stat:
      path: /run/ostree-booted
      get_checksum: false
      get_attributes: false
      get_mime: false
    register: ostree_booted

  - name: Set fact openshift_is_atomic
    set_fact:
      openshift_is_atomic: "{{ ostree_booted.stat.exists }}"

  # Needed this for the bare public CentOS images
  - when: not (openshift_is_atomic | bool)
    block:
    - name: Install NetworkManager
      include_tasks: tasks/network_manager.yml
      when: platform_type == "centos"

    - name: Create OCP devel repos
      include_tasks: tasks/devel_repos.yml
      when:
        - not use_rhn
        - openshift_deployment_type != 'origin'

    - name: Subscribe and enable OCP release repos
      include_tasks: tasks/rhn_repos.yml
      when:
        - use_rhn
        - openshift_deployment_type != 'origin'

    - meta: flush_handlers

    - name: Get latest available openshift version
      package:
        list: "{{ openshift_service_type }}"

    - name: Grow partition and filesystem
      include_tasks: tasks/growfs.yml
      when: growfs | default(true) | bool
