---

- name: Provision AWS instances
  hosts: localhost
  connection: local
  gather_facts: no

  vars:
    aws_region: "{{ lookup('env', 'AWS_DEFAULT_REGION') }}"
    cluster_id: "{{ lookup('env', 'OPT_CLUSTER_ID') }}"
    cluster_dir: "/oa-testing/cluster"
    aws_instance_file: "{{ cluster_dir }}/inventory/aws.json"
    aws_lb_instance_file: "{{ cluster_dir }}/inventory/awslb.json"
    aws_instance_type: "{{ lookup('env', 'OPT_INSTANCE_TYPE') | default('t2.medium', true) }}"
    aws_public_subnet: "{{ (lookup('file', cluster_dir ~ '/inventory/aws_vpc.json') | from_json).Stacks[0].Outputs | selectattr('OutputKey', 'match', '^PublicSubnetIds') | map(attribute='OutputValue') | first }}"
    aws_security_group: "{{ (lookup('file', cluster_dir ~ '/inventory/aws_vpc.json') | from_json).Stacks[0].Outputs | selectattr('OutputKey', 'match', '^OCPSecurityGroup') | map(attribute='OutputValue') | first }}"
    master_count: "{{ lookup('env', 'OPT_MASTER_COUNT') | default(1, true)}}"
    compute_count: "{{ lookup('env', 'OPT_COMPUTE_COUNT') | default(0, true)}}"
    infra_count: "{{ lookup('env', 'OPT_INFRA_COUNT') | default(0, true)}}"
    lb_count: "{{ ( 1 if master_count | int > 1 else 0 )}}"
    cluster_count: "{{ master_count | int + compute_count | int + infra_count | int + lb_count | int }}"
    master_list: []
    compute_list: []
    infra_list: []
    lb_host: ''
    aws_volumes:
      - device_name: /dev/sda1
        volume_size: 50
        volume_type: gp2
        delete_on_termination: true
    platform_type: "{{ lookup('env', 'OPT_PLATFORM_TYPE') | default('rhel', true) }}"
    platform_type_dict:
      atomic:
        username: "cloud-user"
        owners: "309956199498"  # Red Hat, Inc.
        filters:
          name: "RHEL-Atomic_7.7*"
      centos:
        username: "centos"
        owners: "679593333241"
        filters:
          product-code: "aw0evgkw8e5c1q413zgy5pjce"  # CentOS-7 x86_64
      rhel:
        username: "ec2-user"
        owners: "309956199498"  # Red Hat, Inc.
        filters:
          name: "RHEL-7.9*Hourly*"

  tasks:
  - name: Check for AWS Instance File
    stat:
      path: "{{ aws_instance_file }}"
    register: aws_instance_file_result

  - when: aws_instance_file_result.stat.exists
    block:
    - name: Existing AWS Instance File
      debug:
        msg: "Skipping provision, existing AWS Instance file found."
    - meta: end_play

  - name: Set aws_region from .aws/config file
    set_fact:
      aws_region: "{{ lookup('ini', 'region section=profile\ openshift-dev file=/root/.aws/config') }}"
    when: aws_region == ""

  - import_tasks: tasks/lb_for_atomic.yml
    when:
    - master_count | int > 1
    - platform_type == 'atomic'

  - name: Find the most recently created AMI
    ec2_ami_info:
      region: "{{ aws_region }}"
      owners: "{{ platform_type_dict[platform_type].owners }}"
      filters: "{{ platform_type_dict[platform_type].filters }}"
    register: ec2_ami_facts_results

  - name: Set aws_ami to most recent image
    set_fact:
      aws_ami: "{{ ec2_ami_facts_results.images[-1].image_id }}"

  - name: Set cluster count if Atomic
    set_fact:
      cluster_count: "{{ cluster_count|int - 1 }}"
    when: platform_type == 'atomic'

  - name: Create AWS Instances
    ec2:
      region: "{{ aws_region }}"
      key_name: "openshift-dev"
      instance_type: "{{ aws_instance_type }}"
      count: "{{ cluster_count }}"
      group_id:
        - "{{ aws_security_group }}"
      vpc_subnet_id: "{{ aws_public_subnet }}"
      assign_public_ip: yes
      image: "{{ aws_ami }}"
      volumes: "{{ aws_volumes }}"
      wait: yes
      instance_tags: "{{ {'kubernetes.io/cluster/' ~ cluster_id: 'owned', 'Name': cluster_id} }}"

    register: aws_instances

  - name: Save created AWS Instances
    copy:
      dest: "{{ aws_instance_file }}"
      content: "{{ aws_instances | to_nice_json }}"

  - name: Create list of masters
    set_fact:
      master_list: "{{ master_list + [ item ] }}"
    with_items:
    - "{{ aws_instances.instances[:master_count|int] }}"

  - name: Create list of compute
    set_fact:
      compute_list: "{{ compute_list + [ item ] }}"
    with_items:
    - "{{ aws_instances.instances[master_count|int:master_count|int+compute_count|int] }}"

  - name: Create list of infra
    set_fact:
      infra_list: "{{ infra_list + [ item ] }}"
    with_items:
    - "{{ aws_instances.instances[master_count|int+compute_count|int:master_count|int+compute_count|int+infra_count|int] }}"

  - name: Create lb_host
    set_fact:
      lb_host: "{{ aws_instances.instances[-1] }}"
    when:
    - master_count | int > 1
    - platform_type != 'atomic'

  - name: Create Ansible Inventory File
    template:
      src: hosts.j2
      dest: "{{ cluster_dir }}/inventory/hosts"
